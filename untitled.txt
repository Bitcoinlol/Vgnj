-- Services
local ContextActionService = game:GetService('ContextActionService')
local UserInputService = cloneref and cloneref(game:GetService('UserInputService')) or game:GetService('UserInputService')
local ContentProvider = cloneref and cloneref(game:GetService('ContentProvider')) or game:GetService('ContentProvider')
local TweenService = cloneref and cloneref(game:GetService('TweenService')) or game:GetService('TweenService')
local HttpService = cloneref and cloneref(game:GetService('HttpService')) or game:GetService('HttpService')
local TextService = cloneref and cloneref(game:GetService('TextService')) or game:GetService('TextService')
local RunService = cloneref and cloneref(game:GetService('RunService')) or game:GetService('RunService')
local Lighting = cloneref and cloneref(game:GetService('Lighting')) or game:GetService('Lighting')
local Players = cloneref and cloneref(game:GetService('Players')) or game:GetService('Players')
local CoreGui = cloneref and cloneref(game:GetService('CoreGui')) or game:GetService('CoreGui')
local Debris = cloneref and cloneref(game:GetService('Debris')) or game:GetService('Debris')
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService('GuiService')
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Stats = game:GetService("Stats")
local InsertService = game:GetService("InsertService") -- Added for Avatar Changer

local LocalPlayer = Players.LocalPlayer
local clientCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local clientHumanoid = clientCharacter:FindFirstChildOfClass("Humanoid")
local AliveGroup = Workspace:FindFirstChild("Alive")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Hotbar = PlayerGui:WaitForChild("Hotbar")
local ParryCD = PlayerGui.Hotbar.Block.UIGradient
local AbilityCD = PlayerGui.Hotbar.Ability.UIGradient

-- Variables
local Phantom = false
local Tornado_Time = tick()
local Last_Input = UserInputService:GetLastInputType()
local Vector2_Mouse_Location = nil
local Grab_Parry = nil
local Parry_Remote = true
local Parry_Key = nil
local Parry_Arg = nil
local Speed_Divisor_Multiplier = 1.1
local LobbyAP_Speed_Divisor_Multiplier = 1.1
local firstParryFired = false
local ParryThreshold = 2.5
local firstParryType = 'F_Key'
local Previous_Positions = {}
local Parries = 0
local Lerp_Radians = 0
local Last_Warping = tick()
local Previous_Velocity = {}
local Curving = tick()
local Runtime = Workspace.Runtime
local Connections_Manager = {}
local Selected_Parry_Type = "Camera"
local Infinity = false
local Parried = false
local Last_Parry = 0
local AutoParry = true
local Balls = Workspace:WaitForChild('Balls')
local CurrentBall = nil
local InputTask = nil
local Cooldown = 0.02
local RunTime = Workspace:FindFirstChild("Runtime")
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
local StrafeSpeed = 36
local Training_Parried = false
local CosmeticsActive = false
local hit_Sound_Enabled = false
local headLoop = nil
local AutoManualSpamEnabled = false
local ManualSpamActive = false
local recentTargetChanges = {} -- New variable for tracking ball target changes

-- Global variables for new features
getgenv().AutoFarmEnabled = false
getgenv().OrbitSpeed = 20
getgenv().OrbitHeight = 5
getgenv().OrbitDistance = 10
getgenv().AutoFarmBodyVelocity = nil

getgenv().CurrentAmbientR = 128
getgenv().CurrentAmbientG = 128
getgenv().CurrentAmbientB = 128

getgenv().CurrentMusicId = ""
getgenv().MusicPlayer = nil
getgenv().JumpPower = 50
getgenv().WalkSpeed = 16

-- Remote detection
task.spawn(function()
    for _, value in pairs(getgc()) do
        if type(value) == "function" and islclosure(value) then
            local protos = debug.getprotos(value)
            local upvalues = debug.getupvalues(value)
            local constants = debug.getconstants(value)
            if #protos == 4 and #upvalues == 24 and #constants >= 102 then
                -- !!! IMPORTANT: These indices (17, 18, 64) are game-specific and may change with updates.
                -- If Parry_Remote detection fails, you MUST re-verify these indices through reverse engineering.
                Parry_Key = debug.getupvalue(value, 17)
                Parry_Remote = debug.getupvalue(value, 18)
                Parry_Arg = debug.getconstant(value, 64)
                break
            end
        end
    end
    if not Parry_Remote then
        warn("[Parry Remote Detection] Failed to find Parry_Remote")
    else
        print("[Parry Remote Detection] Success: Remote =", Parry_Remote and Parry_Remote.Name or "nil", "Key =", Parry_Key, "Arg =", Parry_Arg)
    end
end)

-- Utility functions
local function BlockMovement(actionName, inputState, inputObject)
    return Enum.ContextActionResult.Sink
end

local function updateNavigation(guiObject)
    GuiService.SelectedObject = guiObject
end

local function performFirstPress(parryType)
    if parryType == 'F_Key' then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
    elseif parryType == 'Left_Click' then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    elseif parryType == 'Navigation' then
        local button = Players.LocalPlayer.PlayerGui.Hotbar.Block
        updateNavigation(button)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        task.wait(0.01)
        updateNavigation(nil)
    end
end

if not LPH_OBFUSCATED then
    function LPH_JIT(Function) return Function end
    function LPH_JIT_MAX(Function) return Function end
    function LPH_NO_VIRTUALIZE(Function) return Function end
end

function create_animation(object, info, value)
    local animation = TweenService:Create(object, info, value)
    animation:Play()
    task.wait(info.Time)
    Debris:AddItem(animation, 0)
    animation:Destroy()
    animation = nil
end

-- Animation handling
local Animation = {}
Animation.storage = {}
Animation.current = nil
Animation.track = nil

for _, v in pairs(ReplicatedStorage.Misc.Emotes:GetChildren()) do
    if v:IsA("Animation") and v:GetAttribute("EmoteName") then
        local Emote_Name = v:GetAttribute("EmoteName")
        Animation.storage[Emote_Name] = v
    end
end

local Emotes_Data = {}
for Object in pairs(Animation.storage) do
    table.insert(Emotes_Data, Object)
end
table.sort(Emotes_Data)

-- Auto_Parry system
local Auto_Parry = {}

function Auto_Parry.Parry_Animation()
    local Parry_Animation = ReplicatedStorage.Shared.SwordAPI.Collection.Default:FindFirstChild('GrabParry')
    local Current_Sword = LocalPlayer.Character:GetAttribute('CurrentlyEquippedSword')
    if not Current_Sword or not Parry_Animation then return end
    local Sword_Data = ReplicatedStorage.Shared.ReplicatedInstances.Swords.GetSword:Invoke(Current_Sword)
    if not Sword_Data or not Sword_Data['AnimationType'] then return end
    for _, object in pairs(ReplicatedStorage.Shared.SwordAPI.Collection:GetChildren()) do
        if object.Name == Sword_Data['AnimationType'] then
            if object:FindFirstChild('GrabParry') or object:FindFirstChild('Grab') then
                local sword_animation_type = object:FindFirstChild('Grab') and 'Grab' or 'GrabParry'
                Parry_Animation = object[sword_animation_type]
            end
        end
    end

    -- Ensure Parry_Animation is an Animation instance before loading
    if Parry_Animation and Parry_Animation:IsA("Animation") then
        Grab_Parry = LocalPlayer.Character.Humanoid.Animator:LoadAnimation(Parry_Animation)
        Grab_Parry:Play()
    else
        warn("Failed to load Parry Animation: Parry_Animation is not a valid Animation instance.")
    end
end

function Auto_Parry.Play_Animation(v)
    local Animations = Animation.storage[v]
    if not Animations then return false end
    local Animator = LocalPlayer.Character.Humanoid.Animator
    if Animation.track then Animation.track:Stop() end
    Animation.track = Animator:LoadAnimation(Animations)
    Animation.track:Play()
    Animation.current = v
end

function Auto_Parry.Get_Balls()
    local Balls = {}
    for _, Instance in pairs(Workspace.Balls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            Instance.CanCollide = false
            table.insert(Balls, Instance)
        end
    end
    return Balls
end

function Auto_Parry.Get_Ball()
    for _, Instance in pairs(Workspace.Balls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            Instance.CanCollide = false
            return Instance
        end
    end
end

function Auto_Parry.Lobby_Balls()
    for _, Instance in pairs(Workspace.TrainingBalls:GetChildren()) do
        if Instance:GetAttribute("realBall") then return Instance end
    end
end

local Closest_Entity = nil

function Auto_Parry.Closest_Player()
    local Max_Distance = math.huge
    local Found_Entity = nil
    for _, Entity in pairs(Workspace.Alive:GetChildren()) do
        if tostring(Entity) ~= tostring(LocalPlayer) then
            if Entity.PrimaryPart then
                local Distance = LocalPlayer:DistanceFromCharacter(Entity.PrimaryPart.Position)
                if Distance < Max_Distance then
                    Max_Distance = Distance
                    Found_Entity = Entity
                end
            end
        end
    end
    Closest_Entity = Found_Entity
    return Found_Entity
end

function Auto_Parry:Get_Entity_Properties()
    Auto_Parry.Closest_Player()
    if not Closest_Entity then return false end
    local Entity_Velocity = Closest_Entity.PrimaryPart.Velocity
    local Entity_Direction = (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Unit
    local Entity_Distance = (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Magnitude
    return {
        Velocity = Entity_Velocity,
        Direction = Entity_Direction,
        Distance = Entity_Distance
    }
end

function Auto_Parry.Parry_Data(Parry_Type)
    Auto_Parry.Closest_Player()
    local Events = {}
    local Camera = Workspace.CurrentCamera
    local Vector2_Mouse_Location
    if Last_Input == Enum.UserInputType.MouseButton1 or Last_Input == Enum.UserInputType.MouseButton2 or Last_Input == Enum.UserInputType.Keyboard then
        local Mouse_Location = UserInputService:GetMouseLocation()
        Vector2_Mouse_Location = {Mouse_Location.X, Mouse_Location.Y}
    else
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    if isMobile then
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    local Players_Screen_Positions = {}
    for _, v in pairs(Workspace.Alive:GetChildren()) do
        if v ~= LocalPlayer.Character then
            local worldPos = v.PrimaryPart.Position
            local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
            if isOnScreen then
                Players_Screen_Positions[v] = Vector2.new(screenPos.X, screenPos.Y)
            end
            Events[tostring(v)] = screenPos
        end
    end
    if Parry_Type == 'Camera' then
        return {0, Camera.CFrame, Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Backwards' then
        local Backwards_Direction = Camera.CFrame.LookVector * -10000
        Backwards_Direction = Vector3.new(Backwards_Direction.X, 0, Backwards_Direction.Z)
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Backwards_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Straight' then
        local Aimed_Player = nil
        local Closest_Distance = math.huge
        local Mouse_Vector = Vector2.new(Vector2_Mouse_Location[1], Vector2_Mouse_Location[2])
        for _, v in pairs(Workspace.Alive:GetChildren()) do
            if v ~= LocalPlayer.Character then
                local worldPos = v.PrimaryPart.Position
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
                if isOnScreen then
                    local playerScreenPos = Vector2.new(screenPos.X, screenPos.Y)
                    local distance = (Mouse_Vector - playerScreenPos).Magnitude
                    if distance < Closest_Distance then
                        Closest_Distance = distance
                        Aimed_Player = v
                    end
                end
            end
        end
        if Aimed_Player then
            return {0, CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Aimed_Player.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        else
            return {0, CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Closest_Entity and Closest_Entity.PrimaryPart.Position or LocalPlayer.Character.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        end
    elseif Parry_Type == 'Random' then
        return {0, CFrame.new(Camera.CFrame.Position, Vector3.new(math.random(-4000, 4000), math.random(-4000, 4000), math.random(-4000, 4000))), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'High' then
        local High_Direction = Camera.CFrame.UpVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + High_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Left' then
        local Left_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - Left_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'Right' then
        local Right_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Right_Direction), Events, Vector2_Mouse_Location}
    elseif Parry_Type == 'RandomTarget' then
        local candidates = {}
        for _, v in pairs(Workspace.Alive:GetChildren()) do
            if v ~= LocalPlayer.Character and v.PrimaryPart then
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(v.PrimaryPart.Position)
                if isOnScreen then
                    table.insert(candidates, {
                        character = v,
                        screenXY = { screenPos.X, screenPos.Y }
                    })
                end
            end
        end
        if #candidates > 0 then
            local pick = candidates[math.random(1, #candidates)]
            local lookCFrame = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, pick.character.PrimaryPart.Position)
            return {0, lookCFrame, Events, pick.screenXY}
        else
            return {0, Camera.CFrame, Events, { Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 }}
        end
    end
    return Parry_Type
end

function Auto_Parry.Parry(parryType)
    if not Parry_Remote then
        warn("[Auto_Parry.Parry] Parry_Remote is nil, cannot parry")
        return false
    end
    local Parry_Data = Auto_Parry.Parry_Data(parryType or Selected_Parry_Type)
    if not Parry_Data then
        warn("[Auto_Parry.Parry] Failed to get Parry_Data")
        return false
    end
    local Hash
    if type(Parry_Arg) == "string" and string.match(Parry_Arg, "PARRY_HASH_FAKE") then
        Hash = nil
    else
        Hash = Parry_Arg
    end
    local success, err = pcall(function()
        Parry_Remote:FireServer(Hash, Parry_Key, Parry_Data[1], Parry_Data[2], Parry_Data[3], Parry_Data[4])
    end)
    if not success then
        warn("[Auto_Parry.Parry] Failed to fire remote:", err)
        return false
    end
    if not firstParryFired then
        performFirstPress(firstParryType)
        firstParryFired = true
    end
    if Parries > 7 then return false end
    Parries = Parries + 1
    task.delay(0.55, function()
        if Parries > 0 then Parries = Parries - 1 end
    end)
    return true
end

function Auto_Parry.Linear_Interpolation(a, b, time_volume)
    return a + (b - a) * time_volume
end

function Auto_Parry.Is_Curved()
    local Ball = Auto_Parry.Get_Ball()
    if not Ball then return false end
    local Zoomies = Ball:FindFirstChild('zoomies')
    if not Zoomies then return false end
    local Velocity = Zoomies.VectorVelocity
    local Ball_Direction = Velocity.Unit
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Ball_Direction)
    local Speed = Velocity.Magnitude
    local Speed_Threshold = math.min(Speed / 100, 40)
    local Direction_Difference = (Ball_Direction - Velocity).Unit
    local Direction_Similarity = Direction:Dot(Direction_Difference)
    local Dot_Difference = Dot - Direction_Similarity
    local Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Pings = Stats.Network.ServerStatsItem['Data Ping'].Value
    local Dot_Threshold = 0.5 - (Pings / 1000)
    local Reach_Time = Distance / Speed - (Pings / 1000)
    local Ball_Distance_Threshold = 15 - math.min(Distance / 1000, 15) + Speed_Threshold
    local Clamped_Dot = math.clamp(Dot, -1, 1)
    local Radians = math.rad(math.asin(Clamped_Dot))
    Lerp_Radians = Auto_Parry.Linear_Interpolation(Lerp_Radians, Radians, 0.8)
    if Speed > 100 and Reach_Time > Pings / 10 then
        Ball_Distance_Threshold = math.max(Ball_Distance_Threshold - 15, 15)
    end
    if Distance < Ball_Distance_Threshold then return false end
    if Dot_Difference < Dot_Threshold then return true end
    if Lerp_Radians < 0.018 then Last_Warping = tick() end
    if (tick() - Last_Warping) < (Reach_Time / 1.5) then return true end
    if (tick() - Curving) < (Reach_Time / 1.5) then return true end
    return Dot < Dot_Threshold
end

function Auto_Parry:Get_Ball_Properties()
    local Ball = Auto_Parry.Get_Ball()
    local Ball_Velocity = Vector3.zero
    local Ball_Origin = Ball
    local Ball_Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball_Origin.Position).Unit
    local Ball_Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Ball_Dot = Ball_Direction:Dot(Ball_Velocity.Unit)
    return {
        Velocity = Ball_Velocity,
        Direction = Ball_Direction,
        Distance = Ball_Distance,
        Dot = Ball_Dot
    }
end

function Auto_Parry.Spam_Service(self)
    local Ball = Auto_Parry.Get_Ball()
    local Entity = Auto_Parry.Closest_Player()
    if not Ball or not Entity or not Entity.PrimaryPart then return false end
    local Spam_Accuracy = 0
    local Velocity = Ball.AssemblyLinearVelocity
    local Speed = Velocity.Magnitude
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Velocity.Unit)
    local Target_Position = Entity.PrimaryPart.Position
    local Target_Distance = LocalPlayer:DistanceFromCharacter(Target_Position)
    local Maximum_Spam_Distance = self.Ping + math.min(Speed / 6, 95)
    if self.Entity_Properties.Distance > Maximum_Spam_Distance or self.Ball_Properties.Distance > Maximum_Spam_Distance or Target_Distance > Maximum_Spam_Distance then
        return Spam_Accuracy
    end
    local Maximum_Speed = 5 - math.min(Speed / 5, 5)
    local Maximum_Dot = math.clamp(Dot, -1, 0) * Maximum_Speed
    Spam_Accuracy = Maximum_Spam_Distance - Maximum_Dot
    return Spam_Accuracy
end

local function GetBall()
    for _, Ball in ipairs(Balls:GetChildren()) do
        if Ball:FindFirstChild("ff") then return Ball end
    end
    return nil
end

local function SpamInput()
    if InputTask then return end
    InputTask = task.spawn(function()
        while AutoParry do
            Auto_Parry.Parry(Selected_Parry_Type)
            task.wait(Cooldown)
        end
        InputTask = nil
    end)
end

local function isCooldownInEffect1(uigradient)
    return uigradient.Offset.Y < 0.4
end

local function isCooldownInEffect2(uigradient)
    return uigradient.Offset.Y == 0.5
end

local function cooldownProtection()
    if isCooldownInEffect1(ParryCD) then
        ReplicatedStorage.Remotes.AbilityButtonPress:Fire()
        return true
    end
    return false
end

local function AutoAbility()
    if isCooldownInEffect2(AbilityCD) then
        if LocalPlayer.Character.Abilities["Raging Deflection"].Enabled or LocalPlayer.Character.Abilities["Rapture"].Enabled or LocalPlayer.Character.Abilities["Calming Deflection"].Enabled or LocalPlayer.Character.Abilities["Aerodynamic Slash"].Enabled or LocalPlayer.Character.Abilities["Fracture"].Enabled or LocalPlayer.Character.Abilities["Death Slash"].Enabled then
            Parried = true
            ReplicatedStorage.Remotes.AbilityButtonPress:Fire()
            task.wait(2.432)
            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("DeathSlashShootActivation"):FireServer(true)
            return true
        end
    end
    return false
end

-- Manual Spam Functions
local function toggleManualSpam(activate)
    ManualSpamActive = activate
    local button = CoreGui:FindFirstChild("ManualSpamUI") and CoreGui.ManualSpamUI.MainFrame.ClashModeButton
    if button then
        if AutoManualSpamEnabled and not ManualSpamActive then
            button.Text = "Auto"
            button.TextColor3 = Color3.new(0, 0, 1)
        else
            button.Text = activate and "Stop" or "Clash Mode"
            button.TextColor3 = activate and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
        end
    end
    if activate then
        if not Connections_Manager['Manual Spam'] then
            Connections_Manager['Manual Spam'] = RunService.Heartbeat:Connect(function()
                Auto_Parry.Parry(Selected_Parry_Type)
            end)
        end
    else
        if Connections_Manager['Manual Spam'] then
            Connections_Manager['Manual Spam']:Disconnect()
            Connections_Manager['Manual Spam'] = nil
        end
    end
end

local function checkAutoManualSpam()
    if not AutoManualSpamEnabled then return end
    local Ball = Auto_Parry.Get_Ball()
    if not Ball then
        if ManualSpamActive then toggleManualSpam(false) end
        return
    end
    local Zoomies = Ball:FindFirstChild('zoomies')
    if not Zoomies then
        if ManualSpamActive then toggleManualSpam(false) end
        return
    end
    Auto_Parry.Closest_Player()
    local Ping = Stats.Network.ServerStatsItem['Data Ping'].Value
    local Ping_Threshold = math.clamp(Ping / 10, 1, 16)
    local Ball_Target = Ball:GetAttribute('target')
    local Ball_Properties = Auto_Parry:Get_Ball_Properties()
    local Entity_Properties = Auto_Parry:Get_Entity_Properties()
    local Spam_Accuracy = Auto_Parry.Spam_Service({
        Ball_Properties = Ball_Properties,
        Entity_Properties = Entity_Properties,
        Ping = Ping_Threshold
    })
    local Target_Position = Closest_Entity and Closest_Entity.PrimaryPart.Position
    local Target_Distance = Target_Position and LocalPlayer:DistanceFromCharacter(Target_Position) or math.huge
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Ball_Direction = Zoomies.VectorVelocity.Unit
    local Dot = Direction:Dot(Ball_Direction)
    local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
    local Pulsed = LocalPlayer.Character:GetAttribute('Pulsed')
    local FastSpamAccuracy = Spam_Accuracy * 0.8
    if Ball_Target and not Pulsed and Target_Distance <= FastSpamAccuracy and Distance <= FastSpamAccuracy and Parries <= ParryThreshold then
        if not ManualSpamActive then toggleManualSpam(true) end
    else
        if ManualSpamActive then toggleManualSpam(false) end
    end
end

-- New function to count recent target changes
local function getRecentTargetChanges()
    local currentTime = tick()
    local count = 0
    for i = #recentTargetChanges, 1, -1 do
        if currentTime - recentTargetChanges[i] < 1 then -- Within last 1 second
            count = count + 1
        else
            table.remove(recentTargetChanges, i)
        end
    end
    return count
end

-- Track ball target changes
Balls.ChildAdded:Connect(function(ball)
    ball:GetAttributeChangedSignal('target'):Connect(function()
        table.insert(recentTargetChanges, tick())
    end)
end)
Balls.ChildRemoved:Connect(function()
    recentTargetChanges = {}
end)

-- New Auto Farm Logic
local function AutoFarmLogic()
    local ball = Auto_Parry.Get_Ball()
    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")

    if not ball or not char or not hrp or not getgenv().AutoFarmEnabled then
        if getgenv().AutoFarmBodyVelocity then
            getgenv().AutoFarmBodyVelocity:Destroy()
            getgenv().AutoFarmBodyVelocity = nil
        end
        return
    end

    if not getgenv().AutoFarmBodyVelocity then
        getgenv().AutoFarmBodyVelocity = Instance.new("BodyVelocity")
        getgenv().AutoFarmBodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        getgenv().AutoFarmBodyVelocity.Parent = hrp
    end

    local ballPos = ball.Position
    local hrpPos = hrp.Position

    -- Calculate the vector from ball to player, flattened on the XZ plane
    local directionToPlayer = (hrpPos - ballPos).Unit * Vector3.new(1, 0, 1)
    if directionToPlayer.Magnitude == 0 then directionToPlayer = Vector3.new(1, 0, 0) end -- Avoid NaN

    -- Calculate the tangent direction for orbiting
    local orbitDirection = directionToPlayer:Cross(Vector3.new(0, 1, 0)).Unit

    -- Calculate the target position for orbiting
    local targetPosition = ballPos + orbitDirection * getgenv().OrbitDistance + Vector3.new(0, getgenv().OrbitHeight, 0)

    -- Calculate velocity towards the target position
    local desiredVelocity = (targetPosition - hrpPos).Unit * getgenv().OrbitSpeed

    -- Apply the velocity
    getgenv().AutoFarmBodyVelocity.Velocity = desiredVelocity
end

-- Hook Auto Farm to Heartbeat
Connections_Manager['Auto Farm Logic'] = RunService.Heartbeat:Connect(AutoFarmLogic)

-- New UI with Allusive-UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MarchHubOnTopFr/Allusive-UI/refs/heads/main/Source.lua"))()
local main = Library.new()

-- New Tabs
local blatant_tab = main:create_tab("Blatant", "rbxassetid://76499042599127")
local player_tab = main:create_tab("Player", "rbxassetid://126017907477623")
local combat_tab = main:create_tab("Combat", "rbxassetid://76499042599127")
local visuals_tab = main:create_tab("Visuals", "rbxassetid://126017907477623")
local world_tab = main:create_tab("World", "rbxassetid://76499042599127")
local movement_tab = main:create_tab("Movement", "rbxassetid://126017907477623")
local exploits_tab = main:create_tab("Exploits", "rbxassetid://76499042599127")
local utilities_tab = main:create_tab("Utilities", "rbxassetid://126017907477623")
local environment_tab = main:create_tab("Environment", "rbxassetid://76499042599127")
local cheats_tab = main:create_tab("Cheats", "rbxassetid://126017907477623")
local cosmetics_tab = main:create_tab("Cosmetics", "rbxassetid://76499042599127")
local debug_tab = main:create_tab("Debug", "rbxassetid://126017907477623")
local skin_changer_tab = main:create_tab("Skin Changer", "rbxassetid://76499042599127") -- You can choose a different asset ID for the icon

-- Blatant Modules
local auto_parry_module = blatant_tab:create_module({
    title = "Auto Parry",
    flag = "Auto_Parry",
    description = "Automatically parries attacks",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Auto Parry'] = RunService.PreSimulation:Connect(function()
                local One_Ball = Auto_Parry.Get_Ball()
                local Balls = Auto_Parry.Get_Balls()
                for _, Ball in pairs(Balls) do
                    if not Ball then return end
                    local Zoomies = Ball:FindFirstChild('zoomies')
                    if not Zoomies then return end
                    Ball:GetAttributeChangedSignal('target'):Once(function()
                        Parried = false
                    end)
                    if Parried then return end
                    local Ball_Target = Ball:GetAttribute('target')
                    local One_Target = One_Ball:GetAttribute('target')
                    local Velocity = Zoomies.VectorVelocity
                    local Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
                    local Ping = Stats.Network.ServerStatsItem['Data Ping'].Value / 10
                    local Ping_Threshold = math.clamp(Ping / 10, 5, 17)
                    local Speed = Velocity.Magnitude
                    local cappedSpeedDiff = math.min(math.max(Speed - 9.5, 0), 650)
                    local speed_divisor_base = 2.4 + cappedSpeedDiff * 0.002
                    local effectiveMultiplier = Speed_Divisor_Multiplier
                    if getgenv().RandomParryAccuracyEnabled then
                        if Speed < 200 then
                            effectiveMultiplier = 0.7 + (math.random(40, 100) - 1) * (0.35 / 99)
                        else
                            effectiveMultiplier = 0.7 + (math.random(1, 100) - 1) * (0.35 / 99)
                        end
                    end
                    local speed_divisor = speed_divisor_base * effectiveMultiplier
                    local Parry_Accuracy = Ping_Threshold + math.max(Speed / speed_divisor, 9.5)
                    local Curved = Auto_Parry.Is_Curved()
                    if Phantom and LocalPlayer.Character:FindFirstChild('ParryHighlight') and getgenv().PhantomV2Detection then
                        ContextActionService:BindAction('BlockPlayerMovement', BlockMovement, false, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.UserInputType.Touch)
                        LocalPlayer.Character.Humanoid.WalkSpeed = 36
                        LocalPlayer.Character.Humanoid:MoveTo(Ball.Position)
                        task.spawn(function()
                            repeat
                                if LocalPlayer.Character.Humanoid.WalkSpeed ~= 36 then
                                    LocalPlayer.Character.Humanoid.WalkSpeed = 36
                                end
                                task.wait()
                            until not Phantom
                        end)
                        Ball:GetAttributeChangedSignal('target'):Once(function()
                            ContextActionService:UnbindAction('BlockPlayerMovement')
                            Phantom = false
                            LocalPlayer.Character.Humanoid:MoveTo(LocalPlayer.Character.HumanoidRootPart.Position)
                            LocalPlayer.Character.Humanoid.WalkSpeed = 10
                            task.delay(3, function()
                                LocalPlayer.Character.Humanoid.WalkSpeed = 36
                            end)
                        end)
                    end
                    if Ball_Target == tostring(LocalPlayer) and Distance <= Parry_Accuracy and Phantom then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                        Parried = true
                    end
                    if Ball:FindFirstChild('AeroDynamicSlashVFX') then
                        Debris:AddItem(Ball.AeroDynamicSlashVFX, 0)
                        Tornado_Time = tick()
                    end
                    if Runtime:FindFirstChild('Tornado') then
                        if (tick() - Tornado_Time) < (Runtime.Tornado:GetAttribute("TornadoTime") or 1) + 0.314159 then
                            return
                        end
                    end
                    if One_Target == tostring(LocalPlayer) and Curved then return end
                    if Ball:FindFirstChild("ComboCounter") then return end
                    local Singularity_Cape = LocalPlayer.Character.PrimaryPart:FindFirstChild('SingularityCape')
                    if Singularity_Cape then return end
                    if getgenv().InfinityDetection and Infinity then return end
                    if Ball_Target == tostring(LocalPlayer) and Distance <= Parry_Accuracy then
                        if getgenv().AutoAbility and AutoAbility() then return end
                    end
                    if Ball_Target == tostring(LocalPlayer) and Distance <= Parry_Accuracy then
                        if getgenv().CooldownProtection and cooldownProtection() then return end
                        local Parry_Time = os.clock()
                        local Time_View = Parry_Time - Last_Parry
                        if Time_View > 0.5 then Auto_Parry.Parry_Animation() end
                        if getgenv().AutoParryKeypress then
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
                        else
                            Auto_Parry.Parry(Selected_Parry_Type)
                        end
                        Last_Parry = Parry_Time
                        Parried = true
                    end
                    local Last_Parrys = tick()
                    repeat
                        RunService.PreSimulation:Wait()
                    until (tick() - Last_Parrys) >= 1 or not Parried
                    Parried = false
                end
            end)
        else
            if Connections_Manager['Auto Parry'] then
                Connections_Manager['Auto Parry']:Disconnect()
                Connections_Manager['Auto Parry'] = nil
            end
        end
    end
})

auto_parry_module:create_slider({
    title = "Parry Accuracy",
    flag = "Parry_Accuracy",
    maximum_value = 100,
    minimum_value = 1,
    value = 100,
    round_number = true,
    callback = function(value)
        Speed_Divisor_Multiplier = 0.7 + (value - 1) * (0.35 / 99)
    end
})

local parryTypeMap = {
    ["Camera"] = "Camera",
    ["Random"] = "Random",
    ["Backwards"] = "Backwards",
    ["Straight"] = "Straight",
    ["High"] = "High",
    ["Left"] = "Left",
    ["Right"] = "Right",
    ["Random Target"] = "RandomTarget"
}

auto_parry_module:create_dropdown({
    title = "Curve Type",
    flag = "Curve_Type",
    options = {"Camera", "Random", "Backwards", "Straight", "High", "Left", "Right", "Random Target"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        Selected_Parry_Type = parryTypeMap[value] or value
    end
})

auto_parry_module:create_checkbox({
    title = "Random Parry Accuracy",
    flag = "Random_Parry_Accuracy",
    callback = function(value)
        getgenv().RandomParryAccuracyEnabled = value
    end
})

auto_parry_module:create_checkbox({
    title = "Infinity Detection",
    flag = "Infinity_Detection",
    callback = function(value)
        getgenv().InfinityDetection = value
    end
})

auto_parry_module:create_checkbox({
    title = "Keypress",
    flag = "Keypress",
    callback = function(value)
        getgenv().AutoParryKeypress = value
    end
})

auto_parry_module:create_checkbox({
    title = "Phantom Detection",
    flag = "Phantom_Detection",
    callback = function(value)
        getgenv().PhantomV2Detection = value
    end
})

local auto_spam_parry_module = blatant_tab:create_module({
    title = "Auto Spam Parry",
    flag = "Auto_Spam_Parry",
    description = "Spams parry automatically with advanced detection",
    section = "right",
    callback = function(value)
        if value then
            Connections_Manager['Auto Spam'] = RunService.PreSimulation:Connect(function()
                local Ball = Auto_Parry.Get_Ball()
                if not Ball then return end
                local Zoomies = Ball:FindFirstChild('zoomies')
                if not Zoomies then return end
                Auto_Parry.Closest_Player()
                local Ping = Stats.Network.ServerStatsItem['Data Ping'].Value
                local Ping_Threshold = math.clamp(Ping / 10, 1, 16)
                local Ball_Target = Ball:GetAttribute('target')
                local Ball_Properties = Auto_Parry:Get_Ball_Properties()
                local Entity_Properties = Auto_Parry:Get_Entity_Properties()
                local Spam_Accuracy = Auto_Parry.Spam_Service({
                    Ball_Properties = Ball_Properties,
                    Entity_Properties = Entity_Properties,
                    Ping = Ping_Threshold
                })
                local recentChanges = getRecentTargetChanges()
                local adjustedSpamAccuracy = Spam_Accuracy + (recentChanges * 5) -- Increase range with more target changes
                local Target_Position = Closest_Entity and Closest_Entity.PrimaryPart.Position
                local Target_Distance = Target_Position and LocalPlayer:DistanceFromCharacter(Target_Position) or math.huge
                local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
                local Ball_Direction = Zoomies.VectorVelocity.Unit
                local Dot = Direction:Dot(Ball_Direction)
                local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
                if not Ball_Target then return end
                if Target_Distance > adjustedSpamAccuracy or Distance > adjustedSpamAccuracy then return end
                local Pulsed = LocalPlayer.Character:GetAttribute('Pulsed')
                if Pulsed then return end
                if Ball_Target == tostring(LocalPlayer) and Target_Distance > 30 and Distance > 30 then return end
                local threshold = ParryThreshold
                if Distance <= adjustedSpamAccuracy and (Parries > threshold or recentChanges >= 3) then -- Spam if recent target changes detected
                    if getgenv().SpamParryKeypress then
                        -- This was sending nil, which won't trigger a keypress. Changed to F.
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                    else
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end
                end
            end)
        else
            if Connections_Manager['Auto Spam'] then
                Connections_Manager['Auto Spam']:Disconnect()
                Connections_Manager['Auto Spam'] = nil
            end
        end
    end
})

auto_spam_parry_module:create_dropdown({
    title = "Parry Type",
    flag = "Spam_Parry_Type",
    options = {"Legit", "Blatant"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value) end
})

auto_spam_parry_module:create_slider({
    title = "Parry Threshold",
    flag = "Parry_Threshold",
    maximum_value = 10,
    minimum_value = 1,
    value = 2.5,
    round_number = false,
    callback = function(value)
        ParryThreshold = value
    end
})

if not isMobile then
    auto_spam_parry_module:create_checkbox({
        title = "Animation Fix",
        flag = "Animation_Fix",
        callback = function(value)
            if value then
                Connections_Manager['Animation Fix'] = RunService.PreSimulation:Connect(function()
                    local Ball = Auto_Parry.Get_Ball()
                    if not Ball then return end
                    local Zoomies = Ball:FindFirstChild('zoomies')
                    if not Zoomies then return end
                    Auto_Parry.Closest_Player()
                    local Ping = Stats.Network.ServerStatsItem['Data Ping'].Value
                    local Ping_Threshold = math.clamp(Ping / 10, 10, 16)
                    local Ball_Target = Ball:GetAttribute('target')
                    local Ball_Properties = Auto_Parry:Get_Ball_Properties()
                    local Entity_Properties = Auto_Parry:Get_Entity_Properties()
                    local Spam_Accuracy = Auto_Parry.Spam_Service({
                        Ball_Properties = Ball_Properties,
                        Entity_Properties = Entity_Properties,
                        Ping = Ping_Threshold
                    })
                    local recentChanges = getRecentTargetChanges()
                    local adjustedSpamAccuracy = Spam_Accuracy + (recentChanges * 5)
                    local Target_Position = Closest_Entity and Closest_Entity.PrimaryPart.Position
                    local Target_Distance = Target_Position and LocalPlayer:DistanceFromCharacter(Target_Position) or math.huge
                    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
                    local Ball_Direction = Zoomies.VectorVelocity.Unit
                    local Dot = Direction:Dot(Ball_Direction)
                    local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
                    if not Ball_Target then return end
                    if Target_Distance > adjustedSpamAccuracy or Distance > adjustedSpamAccuracy then return end
                    local Pulsed = LocalPlayer.Character:GetAttribute('Pulsed')
                    if Pulsed then return end
                    if Ball_Target == tostring(LocalPlayer) and Target_Distance > 30 and Distance > 30 then return end
                    local threshold = ParryThreshold
                    if Distance <= adjustedSpamAccuracy and (Parries > threshold or recentChanges >= 3) then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                    end
                end)
            else
                if Connections_Manager['Animation Fix'] then
                    Connections_Manager['Animation Fix']:Disconnect()
                    Connections_Manager['Animation Fix'] = nil
                end
            end
        end
    })
end

local manual_spam_module = blatant_tab:create_module({
    title = "Manual Spam",
    flag = "Manual_Spam",
    description = "Manual spam parry controls",
    section = "left",
    callback = function(value) end
})

manual_spam_module:create_checkbox({
    title = "Auto Manual Spam",
    flag = "Auto_Manual_Spam",
    callback = function(value)
        AutoManualSpamEnabled = value
        if value then
            Connections_Manager['Auto Manual Spam'] = RunService.Heartbeat:Connect(checkAutoManualSpam)
            local button = CoreGui:FindFirstChild("ManualSpamUI") and CoreGui.ManualSpamUI.MainFrame.ClashModeButton
            if button then
                if AutoManualSpamEnabled and not ManualSpamActive then
                    button.Text = "Auto"
                    button.TextColor3 = Color3.new(0, 0, 1)
                end
            end
        else
            if Connections_Manager['Auto Manual Spam'] then
                Connections_Manager['Auto Manual Spam']:Disconnect()
                Connections_Manager['Auto Manual Spam'] = nil
            end
            if ManualSpamActive then toggleManualSpam(false) end
            local button = CoreGui:FindFirstChild("ManualSpamUI") and CoreGui.ManualSpamUI.MainFrame.ClashModeButton
            if button then
                button.Text = "Clash Mode"
                button.TextColor3 = Color3.new(1, 0, 0)
            end
        end
    end
})

manual_spam_module:create_checkbox({
    title = "Manual Spam UI",
    flag = "Manual_Spam_UI",
    callback = function(value)
        getgenv().spamui = value
        if value then
            if not CoreGui:FindFirstChild("ManualSpamUI") then
                local gui = Instance.new("ScreenGui")
                gui.Name = "ManualSpamUI"
                gui.ResetOnSpawn = false
                gui.Parent = CoreGui

                local frame = Instance.new("Frame")
                frame.Name = "MainFrame"
                frame.Position = UDim2.new(0, 20, 0, 20)
                frame.Size = UDim2.new(0, 160, 0, 60)
                frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                frame.BackgroundTransparency = 0.3
                frame.BorderSizePixel = 0
                frame.Active = true
                frame.Draggable = true
                frame.Parent = gui

                local uiCorner = Instance.new("UICorner")
                uiCorner.CornerRadius = UDim.new(0, 12)
                uiCorner.Parent = frame

                local uiStroke = Instance.new("UIStroke")
                uiStroke.Thickness = 2
                uiStroke.Color = Color3.new(0, 0, 0)
                uiStroke.Parent = frame

                local button = Instance.new("TextButton")
                button.Name = "ClashModeButton"
                button.Text = AutoManualSpamEnabled and "Auto" or "Clash Mode"
                button.TextColor3 = AutoManualSpamEnabled and Color3.new(0, 0, 1) or Color3.new(1, 0, 0)
                button.Size = UDim2.new(0, 120, 0, 40)
                button.Position = UDim2.new(0.5, -60, 0.5, -20)
                button.BackgroundTransparency = 1
                button.BorderSizePixel = 0
                button.Font = Enum.Font.GothamSemibold
                button.TextSize = 18
                button.Parent = frame

                button.MouseButton1Click:Connect(function()
                    if not AutoManualSpamEnabled then
                        toggleManualSpam(not ManualSpamActive)
                    end
                end)
            end
        else
            if CoreGui:FindFirstChild("ManualSpamUI") then
                CoreGui:FindFirstChild("ManualSpamUI"):Destroy()
            end
            if Connections_Manager['Manual Spam'] then
                Connections_Manager['Manual Spam']:Disconnect()
                Connections_Manager['Manual Spam'] = nil
            end
            if Connections_Manager['Auto Manual Spam'] then
                Connections_Manager['Auto Manual Spam']:Disconnect()
                Connections_Manager['Auto Manual Spam'] = nil
            end
            ManualSpamActive = false
            AutoManualSpamEnabled = false
        end
    end
})

local lobby_ap_module = blatant_tab:create_module({
    title = "Lobby AP",
    flag = "Lobby_AP",
    description = "Auto parry in lobby",
    section = "right",
    callback = function(value)
        if value then
            Connections_Manager['Lobby AP'] = RunService.Heartbeat:Connect(function()
                local Ball = Auto_Parry.Lobby_Balls()
                if not Ball then return end
                local Zoomies = Ball:FindFirstChild('zoomies')
                if not Zoomies then return end
                Ball:GetAttributeChangedSignal('target'):Once(function()
                    Training_Parried = false
                end)
                if Training_Parried then return end
                local Ball_Target = Ball:GetAttribute('target')
                local Velocity = Zoomies.VectorVelocity
                local Distance = LocalPlayer:DistanceFromCharacter(Ball.Position)
                local Speed = Velocity.Magnitude
                local Ping = Stats.Network.ServerStatsItem['Data Ping'].Value / 10
                local LobbyAPcappedSpeedDiff = math.min(math.max(Speed - 9.5, 0), 650)
                local LobbyAPspeed_divisor_base = 2.4 + LobbyAPcappedSpeedDiff * 0.002
                local LobbyAPeffectiveMultiplier = LobbyAP_Speed_Divisor_Multiplier
                if getgenv().LobbyAPRandomParryAccuracyEnabled then
                    LobbyAPeffectiveMultiplier = 0.7 + (math.random(1, 100) - 1) * (0.35 / 99)
                end
                local LobbyAPspeed_divisor = LobbyAPspeed_divisor_base * LobbyAPeffectiveMultiplier
                local LobbyAPParry_Accuracys = Ping + math.max(Speed / LobbyAPspeed_divisor, 9.5)
                if Ball_Target == tostring(LocalPlayer) and Distance <= LobbyAPParry_Accuracys then
                    if getgenv().LobbyAPKeypress then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                    else
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end
                    Training_Parried = true
                end
                local Last_Parrys = tick()
                repeat
                    RunService.PreSimulation:Wait()
                until (tick() - Last_Parrys) >= 1 or not Training_Parried
                Training_Parried = false
            end)
        else
            if Connections_Manager['Lobby AP'] then
                Connections_Manager['Lobby AP']:Disconnect()
                Connections_Manager['Lobby AP'] = nil
            end
        end
    end
})

lobby_ap_module:create_slider({
    title = "Parry Accuracy",
    flag = "Lobby_Parry_Accuracy",
    maximum_value = 100,
    minimum_value = 1,
    value = 100,
    round_number = true,
    callback = function(value)
        LobbyAP_Speed_Divisor_Multiplier = 0.7 + (value - 1) * (0.35 / 99)
    end
})

lobby_ap_module:create_checkbox({
    title = "Random Parry Accuracy",
    flag = "Lobby_Random_Parry_Accuracy",
    callback = function(value)
        getgenv().LobbyAPRandomParryAccuracyEnabled = value
    end
})

-- Player Modules
local speed_module = player_tab:create_module({
    title = "Speed",
    flag = "Speed",
    description = "Increases player speed",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Strafe'] = RunService.PreSimulation:Connect(function()
                local character = LocalPlayer.Character
                if character and character:FindFirstChild("Humanoid") then
                    character.Humanoid.WalkSpeed = StrafeSpeed
                end
            end)
        else
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.WalkSpeed = 16 -- Set to default Roblox walkspeed, not 36
            end
            if Connections_Manager['Strafe'] then
                Connections_Manager['Strafe']:Disconnect()
                Connections_Manager['Strafe'] = nil
            end
        end
    end
})

speed_module:create_slider({
    title = "Speed",
    flag = "Speed_Value",
    maximum_value = 200,
    minimum_value = 16, -- Default walkspeed
    value = 16,
    round_number = true,
    callback = function(value)
        StrafeSpeed = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end
})

local jump_power_module = player_tab:create_module({
    title = "Jump Power",
    flag = "Jump_Power",
    description = "Modifies player jump power",
    section = "left",
    callback = function(value)
        if value then
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                LocalPlayer.Character.Humanoid.JumpPower = getgenv().JumpPower
            end
            Connections_Manager['Jump Power'] = LocalPlayer.CharacterAdded:Connect(function(char)
                char:WaitForChild("Humanoid").JumpPower = getgenv().JumpPower
            end)
        else
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                LocalPlayer.Character.Humanoid.JumpPower = 50 -- Default jump power
            end
            if Connections_Manager['Jump Power'] then
                Connections_Manager['Jump Power']:Disconnect()
                Connections_Manager['Jump Power'] = nil
            end
        end
    end
})

jump_power_module:create_slider({
    title = "Jump Power",
    flag = "Jump_Power_Value",
    maximum_value = 500,
    minimum_value = 50,
    value = 50,
    round_number = true,
    callback = function(value)
        getgenv().JumpPower = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = value
        end
    end
})

local spinbot_module = player_tab:create_module({
    title = "Spinbot",
    flag = "Spinbot",
    description = "Spins the character",
    section = "right",
    callback = function(value)
        getgenv().Spinbot = value
        if value then
            getgenv().spin = true
            getgenv().spinSpeed = getgenv().spinSpeed or 1
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local Client = Players.LocalPlayer
            local function spinCharacter()
                while getgenv().spin do
                    RunService.Heartbeat:Wait()
                    local char = Client.Character
                    local funcHRP = char and char:FindFirstChild("HumanoidRootPart")
                    if char and funcHRP then
                        funcHRP.CFrame *= CFrame.Angles(0, getgenv().spinSpeed, 0)
                    end
                end
            end
            if not getgenv().spinThread then
                getgenv().spinThread = coroutine.create(spinCharacter)
                coroutine.resume(getgenv().spinThread)
            end
        else
            getgenv().spin = false
            if getgenv().spinThread then
                coroutine.yield(getgenv().spinThread) -- Yield the coroutine instead of nil-ing it directly
                getgenv().spinThread = nil
            end
        end
    end
})

spinbot_module:create_slider({
    title = "Speed",
    flag = "Spin_Speed",
    maximum_value = 100,
    minimum_value = 1,
    value = 1,
    round_number = true,
    callback = function(value)
        getgenv().spinSpeed = math.rad(value)
    end
})

local fov_module = player_tab:create_module({
    title = "Field of View",
    flag = "Field_Of_View",
    description = "Adjusts camera FOV",
    section = "left",
    callback = function(value)
        getgenv().CameraEnabled = value
        local Camera = Workspace.CurrentCamera
        if value then
            getgenv().CameraFOV = getgenv().CameraFOV or 70
            Camera.FieldOfView = getgenv().CameraFOV
            if not getgenv().FOVLoop then
                getgenv().FOVLoop = RunService.RenderStepped:Connect(function()
                    if getgenv().CameraEnabled then
                        Camera.FieldOfView = getgenv().CameraFOV
                    end
                end)
            end
        else
            Camera.FieldOfView = 70
            if getgenv().FOVLoop then
                getgenv().FOVLoop:Disconnect()
                getgenv().FOVLoop = nil
            end
        end
    end
})

fov_module:create_slider({
    title = "FOV",
    flag = "FOV_Value",
    maximum_value = 150,
    minimum_value = 50,
    value = 70,
    round_number = true,
    callback = function(value)
        getgenv().CameraFOV = value
        if getgenv().CameraEnabled then
            Workspace.CurrentCamera.FieldOfView = value
        end
    end
})

-- Combat Tab
local hitbox_expander_module = combat_tab:create_module({
    title = "Hitbox Expander",
    flag = "Hitbox_Expander",
    description = "Increases enemy hitbox size",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Hitbox Expander'] = RunService.Heartbeat:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local hrp = player.Character.HumanoidRootPart
                        hrp.Size = Vector3.new(10, 10, 10) -- Expand hitbox
                        hrp.Transparency = 0.9
                    end
                end
            end)
        else
            if Connections_Manager['Hitbox Expander'] then
                Connections_Manager['Hitbox Expander']:Disconnect()
                Connections_Manager['Hitbox Expander'] = nil
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local hrp = player.Character.HumanoidRootPart
                        hrp.Size = Vector3.new(5, 5, 5) -- Reset to default (assuming default is 5x5x5 for HRP)
                        hrp.Transparency = 0
                    end
                end
            end
        end
    end
})

-- Visuals Tab
local esp_module = visuals_tab:create_module({
    title = "ESP",
    flag = "ESP",
    description = "Highlights players through walls",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['ESP'] = RunService.RenderStepped:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local highlight = player.Character:FindFirstChild("ESPHighlight") or Instance.new("Highlight")
                        highlight.Name = "ESPHighlight"
                        highlight.FillColor = Color3.new(1, 0, 0)
                        highlight.OutlineColor = Color3.new(1, 1, 0)
                        highlight.Parent = player.Character
                    end
                end
            end)
        else
            if Connections_Manager['ESP'] then
                Connections_Manager['ESP']:Disconnect()
                Connections_Manager['ESP'] = nil
                for _, player in pairs(Players:GetPlayers()) do
                    if player.Character and player.Character:FindFirstChild("ESPHighlight") then
                        player.Character.ESPHighlight:Destroy()
                    end
                end
            end
        end
    end
})

local visual_fx_module = visuals_tab:create_module({
    title = "Visual Effects",
    flag = "Visual_Effects",
    description = "Toggle various visual effects",
    section = "right",
    callback = function(value) end
})

visual_fx_module:create_checkbox({
    title = "No Head bob",
    flag = "No_Head_Bob",
    callback = function(value)
        if value then
            if not headLoop then
                headLoop = RunService.RenderStepped:Connect(function()
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local head = LocalPlayer.Character:FindFirstChild("Head")
                        if head then
                            head.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
                        end
                    end
                end)
            end
        else
            if headLoop then
                headLoop:Disconnect()
                headLoop = nil
            end
        end
    end
})

visual_fx_module:create_checkbox({
    title = "Hit Sound",
    flag = "Hit_Sound",
    callback = function(value)
        hit_Sound_Enabled = value
    end
})

-- World Tab
local fps_booster_module = world_tab:create_module({
    title = "FPS Booster",
    flag = "FPS_Booster",
    description = "Disables visual effects to boost FPS",
    section = "left",
    callback = function(value)
        if value then
            for _, v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
                    v.Enabled = false
                end
            end
            Lighting.GlobalShadows = false
        else
            for _, v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
                    v.Enabled = true
                end
            end
            Lighting.GlobalShadows = true
        end
    end
})

-- Music ID Changer
local music_changer_module = world_tab:create_module({
    title = "Music Player",
    flag = "Music_Player",
    description = "Play custom music via Asset ID",
    section = "right",
    callback = function(value) end
})

local musicIDTextbox = nil
music_changer_module:create_textbox({
    title = "Music Asset ID",
    flag = "Music_Asset_ID_Input",
    text = "0", -- Placeholder for asset ID
    callback = function(text)
        getgenv().CurrentMusicId = text
    end,
    reference = function(textbox)
        musicIDTextbox = textbox
    end
})

music_changer_module:create_button({
    title = "Play Music",
    flag = "Play_Music_Button",
    callback = function()
        local musicId = tonumber(musicIDTextbox and musicIDTextbox.text)
        if not musicId or musicId == 0 then
            warn("Please enter a valid Music Asset ID.")
            return
        end

        if getgenv().MusicPlayer then
            getgenv().MusicPlayer:Stop()
            getgenv().MusicPlayer:Destroy()
            getgenv().MusicPlayer = nil
        end

        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. musicId
        sound.Parent = Workspace
        sound.Looped = true
        sound.Volume = 0.5 -- Default volume
        sound:Play()
        getgenv().MusicPlayer = sound
        warn("Playing music: " .. tostring(musicId))
    end
})

music_changer_module:create_slider({
    title = "Volume",
    flag = "Music_Volume",
    maximum_value = 1,
    minimum_value = 0,
    value = 0.5,
    round_number = false,
    callback = function(value)
        if getgenv().MusicPlayer then
            getgenv().MusicPlayer.Volume = value
        end
    end
})

music_changer_module:create_button({
    title = "Stop Music",
    flag = "Stop_Music_Button",
    callback = function()
        if getgenv().MusicPlayer then
            getgenv().MusicPlayer:Stop()
            getgenv().MusicPlayer:Destroy()
            getgenv().MusicPlayer = nil
            warn("Music stopped.")
        end
    end
})


-- Movement Tab
local fly_module = movement_tab:create_module({
    title = "Fly",
    flag = "Fly",
    description = "Enables flying",
    section = "left",
    callback = function(value)
        if value then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.MaxForce = Vector3.new(40000, 40000, 40000)
            bodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart
            Connections_Manager['Fly'] = RunService.Heartbeat:Connect(function()
                local moveDirection = LocalPlayer.Character.Humanoid.MoveDirection * 50
                bodyVelocity.Velocity = Vector3.new(moveDirection.X, UserInputService:IsKeyDown(Enum.KeyCode.Space) and 50 or UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) and -50 or 0, moveDirection.Z)
            end)
        else
            if Connections_Manager['Fly'] then
                Connections_Manager['Fly']:Disconnect()
                Connections_Manager['Fly'] = nil
                local bv = LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity")
                if bv then bv:Destroy() end
            end
        end
    end
})

-- Exploits Tab
local ball_magnet_module = exploits_tab:create_module({
    title = "Ball Magnet",
    flag = "Ball_Magnet",
    description = "Attracts the ball to the player",
    section = "left",
    callback = function(value)
        if value then
            Connections_Manager['Ball Magnet'] = RunService.Heartbeat:Connect(function()
                local ball = Auto_Parry.Get_Ball()
                if ball and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local direction = (LocalPlayer.Character.HumanoidRootPart.Position - ball.Position).Unit
                    local velocity = direction * 50
                    ball.Velocity = velocity
                end
            end)
        else
            if Connections_Manager['Ball Magnet'] then
                Connections_Manager['Ball Magnet']:Disconnect()
                Connections_Manager['Ball Magnet'] = nil
            end
        end
    end
})

local auto_farm_module = exploits_tab:create_module({
    title = "Auto Farm (Orbit)",
    flag = "Auto_Farm",
    description = "Automatically orbits the ball for farming",
    section = "right",
    callback = function(value)
        getgenv().AutoFarmEnabled = value
        if not value then
            if getgenv().AutoFarmBodyVelocity then
                getgenv().AutoFarmBodyVelocity:Destroy()
                getgenv().AutoFarmBodyVelocity = nil
            end
        end
    end
})

auto_farm_module:create_slider({
    title = "Orbit Speed",
    flag = "Orbit_Speed",
    maximum_value = 100,
    minimum_value = 10,
    value = 20,
    round_number = true,
    callback = function(value)
        getgenv().OrbitSpeed = value
    end
})

auto_farm_module:create_slider({
    title = "Orbit Height",
    flag = "Orbit_Height",
    maximum_value = 50,
    minimum_value = -10,
    value = 5,
    round_number = true,
    callback = function(value)
        getgenv().OrbitHeight = value
    end
})

auto_farm_module:create_slider({
    title = "Orbit Distance",
    flag = "Orbit_Distance",
    maximum_value = 50,
    minimum_value = 5,
    value = 10,
    round_number = true,
    callback = function(value)
        getgenv().OrbitDistance = value
    end
})

-- Utilities Tab
local spectate_module = utilities_tab:create_module({
    title = "Spectate Mode",
    flag = "Spectate_Mode",
    description = "Spectates the ball or players",
    section = "left",
    callback = function(value)
        if value then
            -- Logic handled by dropdown
        else
            Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
            Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character.Humanoid
        end
    end
})

spectate_module:create_dropdown({
    title = "Spectate Target",
    flag = "Spectate_Target",
    options = {"Ball", "Closest Player"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        if value == "Ball" then
            local ball = Auto_Parry.Get_Ball()
            if ball then
                Workspace.CurrentCamera.CameraType = Enum.CameraType.Follow
                Workspace.CurrentCamera.CameraSubject = ball
            end
        elseif value == "Closest Player" then
            local closest = Auto_Parry.Closest_Player()
            if closest then
                Workspace.CurrentCamera.CameraType = Enum.CameraType.Follow
                Workspace.CurrentCamera.CameraSubject = closest.Humanoid
            end
        end
    end
})

-- Environment Tab
local time_changer_module = environment_tab:create_module({
    title = "Time Changer",
    flag = "Time_Changer",
    description = "Changes the time of day",
    section = "left",
    callback = function(value) end
})

local timeOptions = {
    Day = "14:00:00",
    Night = "00:00:00",
    Evening = "18:00:00"
}

time_changer_module:create_dropdown({
    title = "Preset Times",
    flag = "Preset_Time",
    options = {"Day", "Night", "Evening"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        Lighting.TimeOfDay = timeOptions[value]
    end
})

local more_time_changer_module = environment_tab:create_module({
    title = "Custom Time",
    flag = "Custom_Time",
    description = "Set specific time of day",
    section = "left",
    callback = function(value) end
})

more_time_changer_module:create_slider({
    title = "Hour",
    flag = "Time_Hour",
    maximum_value = 23,
    minimum_value = 0,
    value = 14,
    round_number = true,
    callback = function(value)
        -- Ensure minute is preserved or defaults to 0
        local currentMinute = tonumber(string.sub(Lighting.TimeOfDay, 4, 5)) or 0
        Lighting.TimeOfDay = string.format("%02d:%02d:00", value, currentMinute)
    end
})

more_time_changer_module:create_slider({
    title = "Minute",
    flag = "Time_Minute",
    maximum_value = 59,
    minimum_value = 0,
    value = 0,
    round_number = true,
    callback = function(value)
        -- Ensure hour is preserved
        local currentHour = math.floor(Lighting.ClockTime)
        Lighting.TimeOfDay = string.format("%02d:%02d:00", currentHour, value)
    end
})

local ambient_changer_module = environment_tab:create_module({
    title = "Ambient Changer",
    flag = "Ambient_Changer",
    description = "Changes the ambient color",
    section = "right",
    callback = function(value) end
})

ambient_changer_module:create_slider({
    title = "Red",
    flag = "Ambient_R",
    maximum_value = 255,
    minimum_value = 0,
    value = 128,
    round_number = true,
    callback = function(value)
        getgenv().CurrentAmbientR = value
        Lighting.Ambient = Color3.fromRGB(getgenv().CurrentAmbientR, getgenv().CurrentAmbientG, getgenv().CurrentAmbientB)
    end
})

ambient_changer_module:create_slider({
    title = "Green",
    flag = "Ambient_G",
    maximum_value = 255,
    minimum_value = 0,
    value = 128,
    round_number = true,
    callback = function(value)
        getgenv().CurrentAmbientG = value
        Lighting.Ambient = Color3.fromRGB(getgenv().CurrentAmbientR, getgenv().CurrentAmbientG, getgenv().CurrentAmbientB)
    end
})

ambient_changer_module:create_slider({
    title = "Blue",
    flag = "Ambient_B",
    maximum_value = 255,
    minimum_value = 0,
    value = 128,
    round_number = true,
    callback = function(value)
        getgenv().CurrentAmbientB = value
        Lighting.Ambient = Color3.fromRGB(getgenv().CurrentAmbientR, getgenv().CurrentAmbientG, getgenv().CurrentAmbientB)
    end
})

-- Cheats Tab
local no_fog_module = cheats_tab:create_module({
    title = "No Fog",
    flag = "No_Fog",
    description = "Removes fog for better visibility",
    section = "left",
    callback = function(value)
        if value then
            Lighting.FogEnd = 100000
        else
            Lighting.FogEnd = 1000 -- Default value, may vary by game
        end
    end
})

-- Cosmetics Tab
local cosmetics_module = cosmetics_tab:create_module({
    title = "Korblox Legs",
    flag = "Korblox_Legs",
    description = "Applies Korblox leg cosmetic",
    section = "left",
    callback = function(value)
        local function applyKorblox(character)
            local rightLeg = character:FindFirstChild("RightLeg") or character:FindFirstChild("Right Leg")
            if not rightLeg then return end
            for _, child in pairs(rightLeg:GetChildren()) do
                if child:IsA("SpecialMesh") then child:Destroy() end
            end
            local specialMesh = Instance.new("SpecialMesh")
            specialMesh.MeshId = "rbxassetid://101851696"
            specialMesh.TextureId = "rbxassetid://115727863"
            specialMesh.Scale = Vector3.new(1, 1, 1)
            specialMesh.Parent = rightLeg
        end
        local function saveRightLegProperties(char)
            if char then
                local rightLeg = char:FindFirstChild("RightLeg") or char:FindFirstChild("Right Leg")
                if rightLeg then
                    local originalMesh = rightLeg:FindFirstChildOfClass("SpecialMesh")
                    _G.PlayerCosmeticsCleanup = _G.PlayerCosmeticsCleanup or {}
                    _G.PlayerCosmeticsCleanup.rightLegChildren = {} -- Clear previous children data

                    if originalMesh then
                        _G.PlayerCosmeticsCleanup.hadNoMesh = false
                        table.insert(_G.PlayerCosmeticsCleanup.rightLegChildren, {
                            ClassName = originalMesh.ClassName,
                            Properties = {
                                MeshId = originalMesh.MeshId,
                                TextureId = originalMesh.TextureId,
                                Scale = originalMesh.Scale
                            }
                        })
                    else
                        _G.PlayerCosmeticsCleanup.hadNoMesh = true
                    end
                end
            end
        end
        local function restoreRightLeg(char)
            if char then
                local rightLeg = char:FindFirstChild("RightLeg") or char:FindFirstChild("Right Leg")
                if rightLeg and _G.PlayerCosmeticsCleanup and _G.PlayerCosmeticsCleanup.rightLegChildren then
                    for _, child in pairs(rightLeg:GetChildren()) do
                        if child:IsA("SpecialMesh") then child:Destroy() end
                    end
                    if _G.PlayerCosmeticsCleanup.hadNoMesh then return end
                    for _, childData in ipairs(_G.PlayerCosmeticsCleanup.rightLegChildren) do
                        if childData.ClassName == "SpecialMesh" then
                            local newMesh = Instance.new("SpecialMesh")
                            newMesh.MeshId = childData.Properties.MeshId
                            newMesh.TextureId = childData.Properties.TextureId
                            newMesh.Scale = childData.Properties.Scale
                            newMesh.Parent = rightLeg
                        end
                    end
                end
            end
        end
        if value then
            CosmeticsActive = true
            if LocalPlayer.Character then
                saveRightLegProperties(LocalPlayer.Character)
                applyKorblox(LocalPlayer.Character)
            end
            _G.PlayerCosmeticsCleanup = _G.PlayerCosmeticsCleanup or {}
            _G.PlayerCosmeticsCleanup.characterAddedConn = LocalPlayer.CharacterAdded:Connect(function(char)
                saveRightLegProperties(char)
                applyKorblox(char)
            end)
        else
            CosmeticsActive = false
            if _G.PlayerCosmeticsCleanup and _G.PlayerCosmeticsCleanup.characterAddedConn then
                _G.PlayerCosmeticsCleanup.characterAddedConn:Disconnect()
                _G.PlayerCosmeticsCleanup.characterAddedConn = nil
            end
            if LocalPlayer.Character then
                restoreRightLeg(LocalPlayer.Character)
            end
            _G.PlayerCosmeticsCleanup = {} -- Reset cleanup data
        end
    end
})


-- Avatar Changer (Client-Side Visuals)
local avatar_changer_module = cosmetics_tab:create_module({
    title = "Avatar Changer",
    flag = "Avatar_Changer",
    description = "Change client-side avatar visuals",
    section = "right",
    callback = function(value) end
})

local avatarAssetTextbox = nil
avatar_changer_module:create_textbox({
    title = "Asset ID (Body Part/Accessory)",
    flag = "Avatar_Asset_ID_Input",
    text = "0", -- Placeholder for asset ID
    callback = function(text) end,
    reference = function(textbox)
        avatarAssetTextbox = textbox
    end
})

avatar_changer_module:create_dropdown({
    title = "Part Type",
    flag = "Avatar_Part_Type",
    options = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "Accessory"},
    multi_dropdown = false,
    maximum_options = 1,
    callback = function(value)
        avatar_changer_module.SelectedPartType = value
    end,
    default_value = "Head"
})

avatar_changer_module:create_button({
    title = "Apply Avatar Change",
    flag = "Apply_Avatar_Change_Button",
    callback = function()
        local assetId = tonumber(avatarAssetTextbox and avatarAssetTextbox.text)
        local partType = avatar_changer_module.SelectedPartType

        if not assetId or assetId == 0 then
            warn("Please enter a valid Asset ID.")
            return
        end
        if not partType then
            warn("Please select a Part Type.")
            return
        end

        local char = LocalPlayer.Character
        if not char then warn("Character not found.") return end

        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid then warn("Humanoid not found.") return end

        if partType == "Accessory" then
            local success, newAcc = pcall(function()
                return InsertService:LoadAsset(assetId):GetChildren()[1]
            end)
            if success and newAcc and newAcc:IsA("Accessory") then
                humanoid:AddAccessory(newAcc)
                warn("Applied accessory: " .. tostring(assetId))
            else
                warn("Failed to load or apply accessory from ID: " .. tostring(assetId))
            end
        else
            local bodyPartName = partType:gsub(" ", "") -- "Left Arm" -> "LeftArm"
            local bodyPart = char:FindFirstChild(bodyPartName)
            if not bodyPart and partType == "Torso" then bodyPart = char:FindFirstChild("UpperTorso") or char:FindFirstChild("LowerTorso") end -- For R15
            if not bodyPart then warn("Could not find part: " .. partType) return end

            local success, newModel = pcall(function()
                return InsertService:LoadAsset(assetId)
            end)

            if success and newModel and newModel:IsA("Model") then
                local newPart = newModel:FindFirstChildOfClass("Part") or newModel:FindFirstChildOfClass("MeshPart")
                if newPart then
                    -- Save original properties for potential restore (simple, not comprehensive)
                    local originalPart = bodyPart:Clone()
                    originalPart.Parent = nil -- Parent to nil to hold it
                    _G.OriginalBodyParts = _G.OriginalBodyParts or {}
                    _G.OriginalBodyParts[bodyPart.Name] = originalPart

                    newPart.CFrame = bodyPart.CFrame
                    newPart.Parent = char
                    newPart.Name = bodyPart.Name -- Keep original name
                    newPart.Material = bodyPart.Material -- Transfer some properties
                    newPart.Color = bodyPart.Color

                    -- Transfer welds/motors if possible (very complex, basic attempt)
                    for _, attachment in pairs(bodyPart:GetChildren()) do
                        if attachment:IsA("Attachment") then
                            attachment:Clone().Parent = newPart
                        end
                    end
                    -- This part is highly dependent on how the game rigs its characters.
                    -- Simple replacement often breaks R15 animations.
                    humanoid:RemoveBodyPart(bodyPart)
                    bodyPart:Destroy()
                    humanoid:AddBodyPart(newPart) -- Re-add to humanoid

                    warn("Applied " .. partType .. " from ID: " .. tostring(assetId))
                else
                    warn("Loaded asset is not a valid body part: " .. tostring(assetId))
                end
            else
                warn("Failed to load body part asset from ID: " .. tostring(assetId))
            end
        end
    end
})

avatar_changer_module:create_button({
    title = "Reset Avatar Part",
    flag = "Reset_Avatar_Part_Button",
    callback = function()
        local partType = avatar_changer_module.SelectedPartType
        local char = LocalPlayer.Character
        if not char then warn("Character not found.") return end
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if not humanoid then warn("Humanoid not found.") return end

        if partType == "Accessory" then
            -- Cannot easily "reset" an accessory without knowing which one was added.
            -- Best to just remove all custom accessories or reset character.
            for _, acc in pairs(humanoid:GetAccessories()) do
                -- If you need to remove specific ones, check acc.Handle.MeshId etc.
                -- For now, a general remove will do if only one is expected.
                acc:Destroy()
            end
            warn("Removed accessories.")
        else
            local bodyPartName = partType:gsub(" ", "")
            local currentPart = char:FindFirstChild(bodyPartName)
            if not currentPart and partType == "Torso" then currentPart = char:FindFirstChild("UpperTorso") or char:FindFirstChild("LowerTorso") end

            if currentPart and _G.OriginalBodyParts and _G.OriginalBodyParts[currentPart.Name] then
                local originalPart = _G.OriginalBodyParts[currentPart.Name]:Clone()
                originalPart.Parent = char
                originalPart.CFrame = currentPart.CFrame -- Maintain position
                humanoid:RemoveBodyPart(currentPart)
                currentPart:Destroy()
                humanoid:AddBodyPart(originalPart)
                warn("Restored " .. partType .. ".")
            else
                warn("Could not reset " .. partType .. ". Original not saved or part not found.")
            end
        end
    end
})

-- Debug Tab
local ping_display_module = debug_tab:create_module({
    title = "Ping Display",
    flag = "Ping_Display",
    description = "Shows current ping",
    section = "left",
    callback = function(value)
        if value then
            local label = Instance.new("TextLabel")
            label.Name = "PingLabel"
            label.Parent = CoreGui
            label.Position = UDim2.new(0, 10, 0, 10)
            label.Size = UDim2.new(0, 100, 0, 20)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.new(1, 1, 1)
            label.TextScaled = true
            Connections_Manager['Ping Display'] = RunService.RenderStepped:Connect(function()
                label.Text = "Ping: " .. math.floor(Stats.Network.ServerStatsItem['Data Ping'].Value) .. "ms"
            end)
        else
            if Connections_Manager['Ping Display'] then
                Connections_Manager['Ping Display']:Disconnect()
                Connections_Manager['Ping Display'] = nil
                if CoreGui:FindFirstChild("PingLabel") then
                    CoreGui.PingLabel:Destroy()
                end
            end
        end
    end
})

--- Skin Changer Module
local skin_changer_module = skin_changer_tab:create_module({
    title = "Weapon Skin",
    flag = "Weapon_Skin",
    description = "Change your equipped weapon's appearance",
    section = "left",
    callback = function(value)
        -- The skin changer logic doesn't have an overall enable/disable toggle
        -- through this specific callback, as it's controlled by the buttons.
        -- We just need this module to exist to hold the elements.
    end
})

local currentSwordTextbox = nil -- Reference to the textbox

skin_changer_module:create_textbox({
    title = "Sword Name",
    flag = "Sword_Name_Input",
    text = "Flowing Katana", -- Default value for initial load
    callback = function(text)
        -- This callback updates as the user types, but we'll use button clicks to apply.
    end,
    -- Store a reference to the textbox element for later use
    reference = function(textbox)
        currentSwordTextbox = textbox
    end
})

skin_changer_module:create_button({ -- Changed from checkbox to button for clearer intent
    title = "Load Sword",
    flag = "Load_Sword_Button",
    callback = function()
        local swordName = currentSwordTextbox and currentSwordTextbox.text or ""
        if swordName ~= "" then
            print("[DEBUG] Attempting to load sword from textbox: " .. swordName)
            getgenv().config.enabled = true -- Enable the skin changer
            getgenv().config.model = swordName
            getgenv().config.anim = swordName
            getgenv().config.fx = swordName
            getgenv().updateSword() -- Call the update function
            warn("Attempting to load custom sword: " .. swordName)
        else
            warn("Please enter a sword name into the textbox.")
        end
    end
})

skin_changer_module:create_button({ -- Changed from checkbox to button
    title = "Restore Original Sword",
    flag = "Restore_Sword_Button",
    callback = function()
        print("[DEBUG] Restoring original sword triggered.")
        getgenv().config.enabled = false -- Disable the skin changer, which will trigger restore logic
        getgenv().updateSword() -- Call update to execute the disabled logic
        warn("Restoring original sword.")
    end
})

-- Existing skin changer code (modified to integrate with UI and improve logic)
getgenv().config = getgenv().config or {
    enabled = false,
    model = "Flowing Katana", -- Default value for initial load
    anim = "Flowing Katana",
    fx = "Flowing Katana",
    originalEquippedSword = nil -- To store the truly original sword
}

local p = game:GetService("Players").LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local swords = require(rs:WaitForChild("Shared", 9e9):WaitForChild("ReplicatedInstances", 9e9):WaitForChild("Swords", 9e9))
local ctrl, playFx, lastParry = nil, nil, 0

local function getSlash(name)
    local s = swords:GetSword(name)
    print("[DEBUG] getSlash called for:", name, " - Result:", s and s.SlashName or "nil")
    return (s and s.SlashName) or "SlashEffect"
end

-- Function to save the currently equipped sword for restoration
local function saveOriginalSword()
    if not getgenv().config.originalEquippedSword then
        getgenv().config.originalEquippedSword = p:GetAttribute("CurrentlyEquippedSword")
        print("[DEBUG] Saved original equipped sword:", getgenv().config.originalEquippedSword)
    end
end

-- Ensure original sword is saved as soon as character is available
p.CharacterAdded:Connect(function(char)
    char:WaitForChild("HumanoidRootPart")
    saveOriginalSword()
end)
if p.Character then -- If character already exists on script load
    p.Character:WaitForChild("HumanoidRootPart")
    saveOriginalSword()
end

local function setSword()
    print("[DEBUG] setSword called. getgenv().config.enabled:", getgenv().config.enabled)
    local char = p.Character
    if not char then return end

    if not getgenv().config.enabled then
        -- If disabled, try to re-equip the player's truly original sword
        local originalSword = getgenv().config.originalEquippedSword
        print("[DEBUG] Skin changer disabled. Attempting to re-equip original:", originalSword)
        if originalSword then
            -- Attempt to force equip the original sword via the game's actual remote
            -- **THIS PART IS GAME-SPECIFIC AND WILL LIKELY NEED REFINEMENT**
            -- rs.Remotes.EquipSword:FireServer(originalSword) -- Placeholder, find actual remote for your game

            -- Use the game's internal equip function if hooked/unhooked
            if rawget(swords, "EquipSwordTo") then
                setupvalue(rawget(swords, "EquipSwordTo"), 2, true) -- Re-enable original behavior
                swords:EquipSwordTo(char, originalSword)
                -- Optionally, re-disable after the call if you want to maintain your hook
                -- setupvalue(rawget(swords, "EquipSwordTo"), 2, false)
            end

            -- Update client-side visuals via ctrl
            local swordData = swords:GetSword(originalSword)
            if ctrl and swordData then
                print("[DEBUG] Setting anim/fx for original sword:", swordData.AnimationType, swordData.Name)
                ctrl:SetSword(swordData.AnimationType)
                getgenv().config.slash = getSlash(swordData.Name)
            else
                print("[DEBUG] Could not find sword data for original sword or ctrl. Falling back to Flowing Katana for visuals.")
                if ctrl then ctrl:SetSword("Flowing Katana") end -- Fallback for visual
                getgenv().config.slash = getSlash("Flowing Katana")
            end
        end
        return
    end

    print("[DEBUG] Skin changer enabled. Attempting to equip custom sword:", getgenv().config.model)
    -- Attempt to force equip the custom sword via the game's actual remote
    -- **THIS PART IS GAME-SPECIFIC AND WILL LIKELY NEED REFINEMENT**
    -- rs.Remotes.EquipSword:FireServer(getgenv().config.model) -- Placeholder, find actual remote for your game

    -- Use the game's internal equip function if hooked
    if rawget(swords, "EquipSwordTo") then
        setupvalue(rawget(swords, "EquipSwordTo"), 2, false) -- Ensure it's hooked/disabled for our custom model
        swords:EquipSwordTo(char, getgenv().config.model)
    end

    if ctrl then ctrl:SetSword(getgenv().config.anim) end
end

getgenv().updateSword = function()
    print("[DEBUG] updateSword called.")
    getgenv().config.slash = getSlash(getgenv().config.fx)
    setSword()
end

while task.wait() and not ctrl do
    for _, v in getconnections(rs.Remotes.FireSwordInfo.OnClientEvent) do
        if v.Function and islclosure(v.Function) then
            local u = getupvalues(v.Function)
            if #u == 1 and type(u[1]) == "table" then
                ctrl = u[1]
                print("[DEBUG] Found ctrl:", tostring(ctrl))
                break
            end
        end
    end
end

local parryConnA, parryConnB
while task.wait() and not parryConnA do
    for _, v in getconnections(rs.Remotes.ParrySuccessAll.OnClientEvent) do
        if v.Function and getinfo(v.Function).name == "parrySuccessAll" then
            parryConnA, playFx = v, v.Function
            v:Disable()
            print("[DEBUG] Found and disabled parryConnA.")
            break
        end
    end
end
while task.wait() and not parryConnB do
    for _, v in getconnections(rs.Remotes.ParrySuccessClient.Event) do
        if v.Function and getinfo(v.Function).name == "parrySuccessAll" then
            parryConnB = v
            v:Disable()
            print("[DEBUG] Found and disabled parryConnB.")
            break
        end
    end
end

rs.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(...)
    setthreadidentity(2)
    local a = {...}
    if tostring(a[4]) ~= p.Name then
        lastParry = tick()
    elseif getgenv().config.enabled then
        print("[DEBUG] Applying custom slash and fx in ParrySuccessAll:", getgenv().config.slash, getgenv().config.fx)
        a[1], a[3] = getgenv().config.slash, getgenv().config.fx
    end
    return playFx(unpack(a))
end)

task.spawn(function()
    while task.wait(1) do
        local c = p.Character
        if not c then continue end

        local currentEquippedAttribute = p:GetAttribute("CurrentlyEquippedSword")

        if getgenv().config.enabled then
            print("[DEBUG] Checking custom sword state. Current model attr:", currentEquippedAttribute, "Desired model:", getgenv().config.model)
            if currentEquippedAttribute ~= getgenv().config.model or not c:FindFirstChild(getgenv().config.model) then
                print("[DEBUG] Custom sword not equipped or found. Re-equipping.")
                setSword()
            end
            for _, m in pairs(c:GetChildren()) do
                if m:IsA("Model") and m.Name ~= getgenv().config.model and m.Name ~= "HumanoidRootPart" and m.Name ~= "Head" and m.Name ~= "Torso" and m.Name ~= "Right Arm" and m.Name ~= "Left Arm" and m.Name ~= "Right Leg" and m.Name ~= "Left Leg" and not m:FindFirstChildOfClass("Humanoid") then -- Exclude common character body parts and potential accessories
                    print("[DEBUG] Destroying unwanted model:", m.Name)
                    m:Destroy()
                end
                task.wait()
            end
        else
            -- If disabled, ensure original sword is re-equipped and other models are removed
            print("[DEBUG] Skin changer disabled. Ensuring original sword is equipped. CurrentAttr:", currentEquippedAttribute, "OriginalSaved:", getgenv().config.originalEquippedSword)
            if getgenv().config.originalEquippedSword and (currentEquippedAttribute ~= getgenv().config.originalEquippedSword or not c:FindFirstChild(getgenv().config.originalEquippedSword)) then
                print("[DEBUG] Original sword not equipped or found. Re-equipping original.")
                setSword() -- Call setSword which handles the disabled state and restores
            end
            for _, m in pairs(c:GetChildren()) do
                -- Destroy any lingering custom models if skin changer is off
                if m:IsA("Model") and m.Name ~= (currentEquippedAttribute or "") and m.Name ~= "HumanoidRootPart" and m.Name ~= "Head" and m.Name ~= "Torso" and m.Name ~= "Right Arm" and m.Name ~= "Left Arm" and m.Name ~= "Right Leg" and m.Name ~= "Left Leg" and not m:FindFirstChildOfClass("Humanoid") then -- Add other character parts to exclude from deletion
                    print("[DEBUG] Destroying lingering custom model after disable:", m.Name)
                    m:Destroy()
                end
                task.wait()
            end
        end
    end
end)
print("Velocity Skin changer Initialized.") -- Final confirmation

-- Connections and Events
ReplicatedStorage.Remotes.InfinityBall.OnClientEvent:Connect(function(a, b)
    Infinity = b
end)

Balls.ChildAdded:Connect(function(Value)
    Value.ChildAdded:Connect(function(Child)
        if getgenv().SlashOfFuryDetection and Child.Name == 'ComboCounter' then
            local Sof_Label = Child:FindFirstChildOfClass('TextLabel')
            if Sof_Label then
                repeat
                    local Slashes_Counter = tonumber(Sof_Label.Text)
                    if Slashes_Counter and Slashes_Counter < 32 then
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end
                    task.wait()
                until not Sof_Label.Parent or not Sof_Label
            end
        end
    end)
end)

RunTime.ChildAdded:Connect(function(Object)
    local Name = Object.Name
    if getgenv().PhantomV2Detection then
        if Name == "maxTransmission" or Name == "transmissionpart" then
            local Weld = Object:FindFirstChildWhichIsA("WeldConstraint")
            if Weld then
                local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                if Character and Weld.Part1 == Character.HumanoidRootPart then
                    CurrentBall = GetBall()
                    Weld:Destroy()
                    if CurrentBall then
                        local FocusConnection
                        FocusConnection = RunService.RenderStepped:Connect(function()
                            local Highlighted = CurrentBall:GetAttribute("highlighted")
                            if Highlighted == true then
                                LocalPlayer.Character.Humanoid.WalkSpeed = 36
                                local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
                                if HumanoidRootPart then
                                    local PlayerPosition = HumanoidRootPart.Position
                                    local BallPosition = CurrentBall.Position
                                    local PlayerToBall = (BallPosition - PlayerPosition).Unit
                                    LocalPlayer.Character.Humanoid:Move(PlayerToBall, false)
                                end
                            elseif Highlighted == false then
                                FocusConnection:Disconnect()
                                LocalPlayer.Character.Humanoid.WalkSpeed = 10
                                LocalPlayer.Character.Humanoid:Move(Vector3.new(0, 0, 0), false)
                                task.delay(3, function()
                                    LocalPlayer.Character.Humanoid.WalkSpeed = 36
                                end)
                                CurrentBall = nil
                            end
                        end)
                        task.delay(3, function()
                            if FocusConnection and FocusConnection.Connected then
                                FocusConnection:Disconnect()
                                LocalPlayer.Character.Humanoid:Move(Vector3.new(0, 0, 0), false)
                                LocalPlayer.Character.Humanoid.WalkSpeed = 36
                                CurrentBall = nil
                            end
                        end)
                    end
                end
            end
        end
    end
end)

ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
    if hit_Sound_Enabled then
        -- You need to define 'hit_Sound' as a Sound instance somewhere
        -- Example:
        -- local hit_Sound = Instance.new("Sound")
        -- hit_Sound.SoundId = "rbxassetid://YOUR_HIT_SOUND_ID"
        -- hit_Sound.Parent = game:GetService("SoundService")
        -- hit_Sound:Play()
    end
end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(_, root)
    if root.Parent and root.Parent ~= LocalPlayer.Character then
        if root.Parent.Parent ~= Workspace.Alive then return end
    end
    Auto_Parry.Closest_Player()
    local Ball = Auto_Parry.Get_Ball()
    if not Ball then return end
    local Target_Distance = Closest_Entity and (LocalPlayer.Character.PrimaryPart.Position - Closest_Entity.PrimaryPart.Position).Magnitude or math.huge
    local Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Ball.AssemblyLinearVelocity.Unit)
    local Curve_Detected = Auto_Parry.Is_Curved()
    if Target_Distance < 15 and Distance < 15 and Dot > -0.25 then
        if Curve_Detected then
            Auto_Parry.Parry(Selected_Parry_Type)
        end
    end
    if not Grab_Parry then return end
    Grab_Parry:Stop()
end)

ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
    if LocalPlayer.Character.Parent ~= Workspace.Alive then return end
    if not Grab_Parry then return end
    Grab_Parry:Stop()
end)

Workspace.Balls.ChildAdded:Connect(function()
    Parried = false
end)

Workspace.Balls.ChildRemoved:Connect(function(Value)
    Parries = 0
    Parried = false
    if Connections_Manager['Target Change'] then
        Connections_Manager['Target Change']:Disconnect()
        Connections_Manager['Target Change'] = nil
    end
end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(a, b)
    local Primary_Part = LocalPlayer.Character.PrimaryPart
    local Ball = Auto_Parry.Get_Ball()
    if not Ball then return end
    local Zoomies = Ball:FindFirstChild('zoomies')
    if not Zoomies then return end
    local Speed = Zoomies.VectorVelocity.Magnitude
    local Distance = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Velocity = Zoomies.VectorVelocity
    local Ball_Direction = Velocity.Unit
    local Direction = (LocalPlayer.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Ball_Direction)
    local Pings = Stats.Network.ServerStatsItem['Data Ping'].Value
    local Speed_Threshold = math.min(Speed / 100, 40)
    local Reach_Time = Distance / Speed - (Pings / 1000)
    local Enough_Speed = Speed > 100
    local Ball_Distance_Threshold = 15 - math.min(Distance / 1000, 15) + Speed_Threshold
    if Enough_Speed and Reach_Time > Pings / 10 then
        Ball_Distance_Threshold = math.max(Ball_Distance_Threshold - 15, 15)
    end
    if b ~= Primary_Part and Distance > Ball_Distance_Threshold then
        Curving = tick()
    end
end)

ReplicatedStorage.Remotes.Phantom.OnClientEvent:Connect(function(a, b)
    if b.Name == tostring(LocalPlayer) then
        Phantom = true
    else
        Phantom = false
    end
end)

Workspace.Balls.ChildRemoved:Connect(function()
    Phantom = false
end)

-- Load the UI
main:load()
